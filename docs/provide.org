* provide

While defining contracts local to the constrained function is nice (see [[../defconstrainedfn/][defconstrainedfn]] for more information), very often you will find yourself in possession of an existing function that is not constrained:

#+begin_src clojure
(sqr 0)
;;=> 0
#+end_src

In this case, core.contracts provides the ~provide-contracts~ macro to define contracts and apply them dynamically to existing functions:

#+begin_src clojure
(provide-contracts 
  [sqr "Constraints for squaring" 
    [x] [number? (not= 0 x) => number? pos?]])

(sqr 0)
;; java.lang.AssertionError: 
;;   Assert failed: (not= 0 n)
#+end_src

As shown, the ~sqr~ function is dynamically modified with the contract defined in the body of ~provide-contracts~.  This macro can take any number of vectors where each corresponds to a contract for a given function; including multiple arities embedded within.  core.contracts also allows you to include existing *named* contracts (see [[./defcontract/][defcontract]] for more information) instead of the contract specification vector, as shown below:

#+begin_src clojure
(defcontract sqr-contract
  "Defines the constraints on squaring."
  [n] [number? (not= 0 n) => pos? number?])

(sqr 0)
;;=> 0

(provide-contracts
  [sqr "Apply the contract for squaring" 
       sqr-contract])

(sqr 0)
;; java.lang.AssertionError: 
;;   Assert failed: (not= 0 n)
#+end_src

~provide-contracts~ gives you a lot of flexibilty in how to separate functions from their contracts and likewise apply them in domain-specific ways.

[[../docs.html][return to documentation]]

